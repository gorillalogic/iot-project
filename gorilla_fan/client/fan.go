// Code generated by goagen v1.1.0-dirty, command line:
// $ goagen
// --design=gorilla_fan/design
// --out=$(GOPATH)/src/gorilla_fan
// --version=v1.1.0-dirty
//
// API "gorilla_fan": fan Resource Client
//
// The content of this file is auto-generated, DO NOT MODIFY

package client

import (
	"bytes"
	"fmt"
	"golang.org/x/net/context"
	"net/http"
	"net/url"
	"strconv"
)

// ListFanPath computes a request path to the list action of fan.
func ListFanPath() string {

	return fmt.Sprintf("/fans")
}

// Get a list of Fans
func (c *Client) ListFan(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListFanRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListFanRequest create the request corresponding to the list action endpoint of the fan resource.
func (c *Client) NewListFanRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ShowFanPath computes a request path to the show action of fan.
func ShowFanPath(fanID int) string {
	param0 := strconv.Itoa(fanID)

	return fmt.Sprintf("/fans/%s", param0)
}

// Get fan by id
func (c *Client) ShowFan(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowFanRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowFanRequest create the request corresponding to the show action endpoint of the fan resource.
func (c *Client) NewShowFanRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// TurnFanPath computes a request path to the turn action of fan.
func TurnFanPath(fanID string) string {
	param0 := fanID

	return fmt.Sprintf("/fans/%s", param0)
}

// Turn off or on
func (c *Client) TurnFan(ctx context.Context, path string, payload *FanPayload, contentType string) (*http.Response, error) {
	req, err := c.NewTurnFanRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewTurnFanRequest create the request corresponding to the turn action endpoint of the fan resource.
func (c *Client) NewTurnFanRequest(ctx context.Context, path string, payload *FanPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PUT", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType != "*/*" {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}
