// Code generated by goagen v1.1.0-dirty, command line:
// $ goagen
// --design=gorilla_fan/design
// --out=$(GOPATH)/src/gorilla_fan
// --version=v1.0.0
//
// API "gorilla_fan": Application Controllers
//
// The content of this file is auto-generated, DO NOT MODIFY

package app

import (
	"github.com/goadesign/goa"
	"github.com/goadesign/goa/cors"
	"golang.org/x/net/context"
	"net/http"
)

// initService sets up the service encoders, decoders and mux.
func initService(service *goa.Service) {
	// Setup encoders and decoders
	service.Encoder.Register(goa.NewJSONEncoder, "application/json")
	service.Encoder.Register(goa.NewGobEncoder, "application/gob", "application/x-gob")
	service.Encoder.Register(goa.NewXMLEncoder, "application/xml")
	service.Decoder.Register(goa.NewJSONDecoder, "application/json")
	service.Decoder.Register(goa.NewGobDecoder, "application/gob", "application/x-gob")
	service.Decoder.Register(goa.NewXMLDecoder, "application/xml")

	// Setup default encoder and decoder
	service.Encoder.Register(goa.NewJSONEncoder, "*/*")
	service.Decoder.Register(goa.NewJSONDecoder, "*/*")
}

// FanController is the controller interface for the Fan actions.
type FanController interface {
	goa.Muxer
	List(*ListFanContext) error
	Show(*ShowFanContext) error
	Turn(*TurnFanContext) error
}

// MountFanController "mounts" a Fan resource controller on the given service.
func MountFanController(service *goa.Service, ctrl FanController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/fans", ctrl.MuxHandler("preflight", handleFanOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/fans/:fanID", ctrl.MuxHandler("preflight", handleFanOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListFanContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.List(rctx)
	}
	h = handleFanOrigin(h)
	service.Mux.Handle("GET", "/fans", ctrl.MuxHandler("List", h, nil))
	service.LogInfo("mount", "ctrl", "Fan", "action", "List", "route", "GET /fans")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowFanContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Show(rctx)
	}
	h = handleFanOrigin(h)
	service.Mux.Handle("GET", "/fans/:fanID", ctrl.MuxHandler("Show", h, nil))
	service.LogInfo("mount", "ctrl", "Fan", "action", "Show", "route", "GET /fans/:fanID")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewTurnFanContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*FanPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Turn(rctx)
	}
	h = handleFanOrigin(h)
	service.Mux.Handle("PUT", "/fans/:fanID", ctrl.MuxHandler("Turn", h, unmarshalTurnFanPayload))
	service.LogInfo("mount", "ctrl", "Fan", "action", "Turn", "route", "PUT /fans/:fanID")
}

// handleFanOrigin applies the CORS response headers corresponding to the origin.
func handleFanOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "*") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalTurnFanPayload unmarshals the request body into the context request data Payload field.
func unmarshalTurnFanPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &fanPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// ThermoController is the controller interface for the Thermo actions.
type ThermoController interface {
	goa.Muxer
	List(*ListThermoContext) error
	Setlimits(*SetlimitsThermoContext) error
	Show(*ShowThermoContext) error
}

// MountThermoController "mounts" a Thermo resource controller on the given service.
func MountThermoController(service *goa.Service, ctrl ThermoController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/thermo", ctrl.MuxHandler("preflight", handleThermoOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/thermo/:thermoID", ctrl.MuxHandler("preflight", handleThermoOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListThermoContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.List(rctx)
	}
	h = handleThermoOrigin(h)
	service.Mux.Handle("GET", "/thermo", ctrl.MuxHandler("List", h, nil))
	service.LogInfo("mount", "ctrl", "Thermo", "action", "List", "route", "GET /thermo")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewSetlimitsThermoContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*ThermoPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Setlimits(rctx)
	}
	h = handleThermoOrigin(h)
	service.Mux.Handle("PUT", "/thermo/:thermoID", ctrl.MuxHandler("Setlimits", h, unmarshalSetlimitsThermoPayload))
	service.LogInfo("mount", "ctrl", "Thermo", "action", "Setlimits", "route", "PUT /thermo/:thermoID")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowThermoContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Show(rctx)
	}
	h = handleThermoOrigin(h)
	service.Mux.Handle("GET", "/thermo/:thermoID", ctrl.MuxHandler("Show", h, nil))
	service.LogInfo("mount", "ctrl", "Thermo", "action", "Show", "route", "GET /thermo/:thermoID")
}

// handleThermoOrigin applies the CORS response headers corresponding to the origin.
func handleThermoOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "*") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalSetlimitsThermoPayload unmarshals the request body into the context request data Payload field.
func unmarshalSetlimitsThermoPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &thermoPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}
